<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【GNU/Linux】Linux入门教程</title>
      <link href="/posts/7eb74ede.html"/>
      <url>/posts/7eb74ede.html</url>
      
        <content type="html"><![CDATA[<h2><span id="gnulinuxlinux入门教程">【GNU/Linux】Linux入门教程</span></h2><h3><span id="0推荐链接">0.推荐链接</span></h3><p><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md">命令行的艺术</a></p><h3><span id="1重要命令">1.重要命令</span></h3><ul><li><code>df /</code> - 查看磁盘分区的使用情况。<strong>df:disk free</strong>。</li><li><code>find . -name "*.[ch]"</code> - 查找当前目录下的.c和.h文件</li><li><code>grep "\bint i\b" {{file-name}}</code> - 查找文件<code>file</code>内<code>int i</code>的位置。</li><li><code>wc {{file}}</code> - 统计文件的行数/单词数/字符数</li><li><code>apt-get install {{tool-name}}</code> - 一键下载安装新工具</li><li><code>wget {{http://www.xxx.com//abc.zip}}</code> - 网站下载文件</li><li><code>iconv -f uft-8 -t gbk {{file-name}}</code> - 将文件file的格式进行转换，例子中是从<code>uft-8</code>转换到<code>gbk</code></li><li>比较两个文件是否完全相同<ul><li>文本文件的比较: <code>vimdiff {{file1}} {{file2}}</code></li><li>非文本文件的比较: <code>diff {{file1}} {{file2}}</code></li><li>很大的文件: <code>md5sum {{file1}} {{file2}}</code> - 两个文件的md5码不一样，就肯定不是同一个文件。</li></ul></li><li><code>find . -name "*.[ch]" | xargs grep "#include" | sort | uniq</code> - 列出<code>.c</code>和<code>.h</code>文件中所有被包含过的头文件。 - <strong>eXtended ARGumentS:xargs</strong> - <code>sort</code>是排序，<code>uniq</code>是去除相同的。</li><li><code>strace {{program}}</code> - system call trace, 记录程序运行过程中的系统调用信息<ul><li>如<code>strace ls</code>。查看<code>ls</code>命令的系统调用信息。</li><li>通过观察程序运行过程中发生的系统调用，可以大致了解程序关键行为。<h3><span id="2-shell中方便的功能">2. shell中方便的功能</span></h3></li><li>通过上下方向键检索历史命令</li><li>光标移动<ul><li><code>A-f</code>和<code>A-b</code>按键来按<strong>单词</strong>移动光标。</li><li><code>C-f</code>和<code>C-b</code>按键来按<strong>字符</strong>移动光标</li><li><code>C-a</code>移动到首字符，<code>C-e</code>移动到末字符，<code>C-d</code>删除当前字符。</li></ul></li><li>通过<code>history</code>命令查看历史命令<ul><li>通过<code>!n</code>(<code>n</code>为历史命令的编号)再次执行命令</li><li>通过<code>!xxx</code>再次执行以<code>xxx</code>为开头的最近一条命令</li></ul></li><li>通过<code>cd -</code>返回上一个工作目录</li><li>通配符<ul><li><code>*</code>为任意长度的任意字符串</li><li><code>?</code>为任意一个字符</li><li><code>[]</code>为集合中的任意一个字符</li></ul></li><li>括号拓展<ul><li><code>{}</code>。例如<code>echo Hello-{a,bb,cc}-{1,2}</code><h3><span id="3-任务管理">3. 任务管理</span></h3></li><li><code>C-z</code> - 停止当前任务</li><li><code>bg %{{任务编号}}</code> - 将指定任务编号的任务在后台运行<ul><li>或者在写命令的时候，在末尾加上<code>&amp;</code>。例如<code>sleep 100 &amp;</code></li></ul></li><li><code>fg %{{任务编号}}</code> - 将指定任务编号的任务在前台运行</li><li><code>jobs</code> - 任务栏</li><li><code>kill -9 %{{任务编号}}</code> - 将指定任务编号的任务杀死</li><li>任务管理器<ul><li><code>top</code> - 非图形化任务管理器</li><li><code>htop</code> - 图形化任务管理器</li><li><code>ps</code> - 最简洁的形式<h3><span id="输入输出重定向">输入输出重定向</span></h3></li></ul></li></ul></li><li>查看进程打开的文件<ul><li>Linux上的程序在运行时默认打开了3个文件, 通过 “文件描述符”来编号:<ul><li>0号文件 - 标准输入(默认为当前终端)</li><li>1号文件 - 标准输出(默认为当前终端)</li><li>2号文件 - 标准错误(默认为当前终端)</li></ul></li><li>通过<code>ps</code>查看所有的进程号，通过<code>lsof -p {{PID}}</code>来查看打开的文件。</li><li>使用输入输出重定向后，<code>lsof -p {{PID}}</code>来查看进程打开的文件，会发现对应的0号文件和1号文件会变化。</li></ul></li><li>向文件追加输出<code>ls &gt;&gt; result.txt</code></li><li>可将标准错误重定向到文件</li><li>标准错误一般用于报告错误信息<br><code>ls 2&gt; /dev/null</code></li><li>将标准输入重定向到文件, 无需手动输入<br><code>sort &lt; result.txt</code><h3><span id="管道-一个用于连接程序间输入输出的缓冲区">管道 = 一个用于连接程序间输入输出的缓冲区</span></h3></li><li>示例图:<pre class="language-none"><code class="language-none">+-------+  stdout   +------+  stdin   +-------+| prog1 | --------&gt; | pipe | -------&gt; | prog2 |+-------+           +------+          +-------+</code></pre></li><li>例:<br><code>yes | cat &gt; /dev/null</code>通过lsof查看打开的文件</li><li><code>xargs</code>: 一个特殊的命令, 可以将标准输入转变为命令的参数<h3><span id="编程">编程</span></h3><ul><li>写脚本<ul><li><code>if, for, while, case…</code>等控制流</li><li>变量赋值和引用</li><li>函数定义和调用</li><li>内建命令</li></ul></li><li>写C程序<ul><li>命令行参数 = main()函数的参数</li><li>用<code>getopt()</code>库函数识别并处理参数</li><li>用<code>fopen()</code>打开文件</li><li>用<code>fscanf()/fread()</code>从标准输入读取</li><li>用<code>fprintf()/fwrite()</code>将结果写入到标准输出</li><li><code>main()</code>函数的返回值 = 命令的返回值</li><li><code>main()</code>函数的原型<br><code>int main(int argc, char *argv[], char *envp[]);</code><h3><span id="rtfm">RTFM</span></h3></li></ul></li></ul></li><li>查阅命令/库函数/系统文件等内容的手册</li><li><code>man man</code> - 学习如何RTFM</li><li><code>man ls</code> - 查看如何使用ls命令</li><li><code>man 3 printf</code> - 学习如何使用库函数printf</li><li><code>man -k xxx</code> - 检索含有关键字含有xxx的命令</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GNU/Linux </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【旅游】重庆旅游攻略</title>
      <link href="/posts/314c5eec.html"/>
      <url>/posts/314c5eec.html</url>
      
        <content type="html"><![CDATA[<h2><span id="重庆旅游202326-2023210元宵后">重庆旅游（2023.2.6 - 2023.2.10）（元宵后）</span></h2><h3><span id="民宿选择">民宿选择</span></h3><p>民宿是在<strong>途家民宿</strong>APP上找的，位置在观音桥。<br><img src="/img/重庆旅游攻略/民宿的落地窗.jpg" alt="民宿窗外"><br>相较解放碑，观音桥附近的民宿性价比更高，小红书上说这里是重庆本地人的聚集地。<br>附近有观音桥商圈，公共交通（地铁）也比较附近。有个<strong>红旗沟长途汽车站</strong>可以通往郊区的景点，比如统景温泉（<strong>房东说的</strong>），不过我们没有去郊区玩。</p><h3><span id="推荐美食">推荐美食</span></h3><ul><li>观音桥<ul><li>观音桥的<strong>鹞子丘眼镜火锅</strong>，非常好吃！我两连续吃了三天！<br><img src="/img/重庆旅游攻略/眼镜火锅.jpg" width="30%" height="30%" alt="眼镜火锅"> </li><li>观音桥的<strong>小弟面馆</strong>，挨着鹞子丘眼镜火锅，面馆不大，吃的本地人很多，应该是正宗的重庆面馆。不过我两感觉正宗重庆小面的味道也一般般。<br><img src="/img/重庆旅游攻略/小弟面馆.jpg" width="30%" height="30%" alt="小弟面馆"><br><img src="/img/重庆旅游攻略/小弟面馆的重庆小面.jpg" width="30%" height="30%" alt="小弟面馆的重庆小面"> </li></ul></li><li>解放碑<ul><li>解放碑的<strong>八一好吃街外</strong>的甜筒，忘记啥名字了。我两炫了两根，一根原味一根巧克力。<br><img src="/img/重庆旅游攻略/甜筒.jpg" width="30%" height="30%" alt="甜筒"> </li><li>解放碑的<strong>好又来酸辣粉</strong>，10元一碗酸辣粉，特别好吃！</li><li><strong>陈昌银麻花</strong>也可以。不过淘宝上有卖。</li></ul></li></ul><h3><span id="推荐景点">推荐景点</span></h3><ul><li>沙坪坝<ul><li><strong>融汇温泉</strong>力荐！200左右一人（包一餐）。我两在里面吃的中餐，味道还不错。<br>温泉种类很多，我们去的时候人不算多，温泉水质比较好。里面的环境和配套设施也非常完善。<br>服务特别棒！我两刚下车，门口就有服务员给我们开车门，然后领路！<br>2楼有餐厅和配套休息室！我两中午到的，就先在2楼的休息室睡了一觉，很舒服！</li></ul></li><li>解放碑商圈<ul><li>即八一好吃街附近。里面吃的多，玩的也有一些。wzm在一个商城里面玩了好一阵子，开心。<br><img src="/img/重庆旅游攻略/树.jpg" width="30%" height="30%" alt="拍的树"><br><img src="/img/重庆旅游攻略/人民解放碑.jpg" width="30%" height="30%" alt="人民解放碑"><br><img src="/img/重庆旅游攻略/八一好吃街.jpg" width="30%" height="30%" alt="八一好吃街"> </li></ul></li><li>观音桥商圈<br>和解放碑商圈比较类似。不过外地人不来也挺可惜的。里面的价格相较解放碑商圈也便宜些。<br>里面有两个仿冒茶颜悦色的奶茶品牌，一个叫霸王茶姬，一个叫初茶花月。初茶花月的logo是真的巨丑，不过里面喝的仿·幽兰拿铁的味道还不错。</li></ul><h3><span id="避坑">避坑</span></h3><ul><li>洪崖洞<br><strong>洪崖洞千万不要去</strong>，就是一坨shit，里面没什么玩的，还人挤人！在网上看看图片就好！下面是我两在洪崖洞附近拍的图。<br><strong>cover的图就是洪崖洞</strong>，在里面玩可拍不出这种效果。<br><img src="/img/重庆旅游攻略/重庆大剧院.jpg" width="30%" height="30%" alt="重庆大剧院"><br><img src="/img/重庆旅游攻略/洪崖洞灯笼.jpg" width="30%" height="30%" alt="洪崖洞灯笼"> </li></ul><h3><span id="房东推荐的攻略">房东推荐的攻略</span></h3><p>放在这篇博客里面啦！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wzm </tag>
            
            <tag> tyh </tag>
            
            <tag> 旅游 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vivado】ROM IP核的使用</title>
      <link href="/posts/ab5b7cc3.html"/>
      <url>/posts/ab5b7cc3.html</url>
      
        <content type="html"><![CDATA[<ul><li><h3><span id="rom-ip核的创建方法"><strong>ROM IP核的创建方法</strong></span></h3><img src="https://foruda.gitee.com/images/1675436593019752405/109dae0b_6531589.png" alt="1" title="屏幕截图"><br><img src="https://foruda.gitee.com/images/1675436703461077393/b393cba0_6531589.png" alt="2" title="屏幕截图"><br><img src="https://foruda.gitee.com/images/1675436703187128425/c590353a_6531589.png" alt="3" title="屏幕截图"><br><img src="https://foruda.gitee.com/images/1675436703029907655/40f1f38a_6531589.png" alt="4" title="屏幕截图"><br>然后点击确定，就能生成一个ROM IP核。</li></ul><hr><ul><li><h3><span id="rom-ip核的调用方法"><strong>ROM IP核的调用方法</strong></span></h3><img src="https://foruda.gitee.com/images/1675436918059218885/ace5fdad_6531589.png" alt="1" title="屏幕截图"><br>由于ROM IP核是在 <em>上升沿</em> 读数据，所以如果要将从ROM读的数据写入到其他地方的话，可以在时钟的 <em>下降沿</em> 写数据，具体操作如下：<pre class="language-none"><code class="language-none">// clk下降沿进行address自增，下一个上升沿在rom进行读数据always @(negedge clk) begin // rom是clk上升沿读，所以这里一定要是下降沿！    if (rst) begin // 同步复位        addra_7bit &lt;= 0;        in &lt;= 0;    end    else begin        // 将上个上升沿读的数据写入        in[addra_7bit] &lt;= wave_douta;         if(addra_7bit &lt; (len-1)) begin            addra_7bit &lt;= addra_7bit + 1'b1;        end        else begin            addra_7bit &lt;= 0;        end    endendrom_wave_64w_128d rom_wave (    // 上升沿读数据    .clka(clk),      .addra(addra_7bit),      .douta(wave_douta) ![输入图片说明](https://foruda.gitee.com/images/1675437561499899947/cd9436de_6531589.png "屏幕截图"));</code></pre></li></ul><hr><ul><li><h3><span id="rom-ip核的注意事项"><strong>ROM IP核的注意事项</strong></span></h3></li></ul><ol><li>IP核设置的width可以比实际coe内的数据的width更宽，但是depth必须和实际coe文件内的数据一致。</li><li>当更新coe文件后，必须在IP核配置界面重新LOAD FILE，如下图：<br><img src="https://foruda.gitee.com/images/1675437570773333850/2a2dd185_6531589.png" alt="2" title="屏幕截图"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vivado </tag>
            
            <tag> IC设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VMware】VMware与Windows无法相互拖拽文件、粘贴复制的解决办法</title>
      <link href="/posts/6820c6bc.html"/>
      <url>/posts/6820c6bc.html</url>
      
        <content type="html"><![CDATA[<p>在虚拟机的命令行输入以下命令：<br></p><pre class="language-none"><code class="language-none">$sudo apt-get autoremove open-vm-tools</code></pre><br><pre class="language-none"><code class="language-none">$sudo apt-get install open-vm-tools-desktop</code></pre><br><pre class="language-none"><code class="language-none">$sudo reboot</code></pre><br>并且打开共享文件夹即可<p></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【GNU/Linux】Unified Format</title>
      <link href="/posts/6393c1cf.html"/>
      <url>/posts/6393c1cf.html</url>
      
        <content type="html"><![CDATA[<h2><span id="该格式用来对比修改前和修改后的两个文件的差异">该格式用来对比修改前和修改后的两个文件的差异</span></h2><p><img src="https://foruda.gitee.com/images/1676295492065282810/c43f014d_6531589.png" alt="1" title="1.png"><br>可以看出图中的两个文件 <em>lao</em> 和  <em>tzu</em> 中的字段有一些差异。<br>使用命令<code>diff -u lao tzu</code>后输出如下图：<br><img src="https://foruda.gitee.com/images/1676295542401435909/f188388c_6531589.png" alt="2" title="2.png"><br>首段的<br></p><pre class="language-none"><code class="language-none">--- lao 2002-02-21 23:30:39.942229878 -0800+++ tzu2002-02-21 23:30:50.442260588 -0800</code></pre><br>代表<em>lao</em>文件是<code>-</code>表征，<em>tzu</em>文件是<code>+</code>表征。<br><pre class="language-@@" data-language="@@"><div class="caption"><span>-1,7 +1,6 @@```和```@@ -9,3 +8,6 @@```代表该对比段在源文件中的【块起始行，块所占行数】。后面的代码中，如</span></div><code class="language-@@">```-The Way that can be told of is not the eternal Way;-The name that can be named is not the eternal name. The Nameless is the origin of Heaven and Earth;-The Named is the mother of all things.+The named is the mother of all things.</code></pre><br>所示，<code>-</code>代表是<em>lao</em>文件中独有的，<code>+</code>代表是<em>tzu</em>文件中独有的。没有<code>+</code>或<code>-</code>的字段代表是两个文件共有的。<p></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GNU/Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一切的开始</title>
      <link href="/posts/25e1c0d9.html"/>
      <url>/posts/25e1c0d9.html</url>
      
        <content type="html"><![CDATA[<h3><span id="我和我的最爱">我和我的最爱！</span></h3><p><img src="/img/tang/pic1.jpg" width="30%" height="30%" alt="tyh&amp;wzm"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wzm </tag>
            
            <tag> tyh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【git】git部分重要命令</title>
      <link href="/posts/cff33c4a.html"/>
      <url>/posts/cff33c4a.html</url>
      
        <content type="html"><![CDATA[<h2><span id="0推荐链接">0.推荐链接</span></h2><p><a href="http://onlywei.github.io/explain-git-with-d3/#branch">GIT可视化</a></p><ol><li><p>显示当前目录位置:<code>$:pwd</code></p></li><li><p>显示当前目录文件，包括隐藏文件:<code>$:ls-ah</code></p></li><li><p>git本地仓库初始化：<code>$:git init</code>初始化，产生<code>.git</code>隐藏文件夹</p></li><li><p>git本地仓库添加文件</p><ul><li>添加单一文件:<code>$:git add &lt;文件名&gt;</code>;</li><li>添加所有文件:<code>$:git add .</code>;</li></ul></li><li><p>git本地提交变更:<code>$:git commit -m "输入对应信息"</code>;</p><ul><li>对应信息的标准规范举例:<code>"fix(test): change contest"</code>,意为修改了test文件。</li></ul></li><li><p>git查看本地仓库信息:</p><ul><li>查看本地commit信息:<code>$:git log</code>;</li><li>查看本地文件修改信息:<code>$:git status</code>;</li><li>查看本地所有分支:<code>git branch -a</code></li></ul></li><li><p>git本地回退commit版本：<code>$:git reset --hard &lt;commit_id&gt;</code>;</p><ul><li>使用<code>$:git log</code>可以看到<code>&lt;commit_id&gt;</code></li><li>回退版本后，本地仓库内容会变化。</li></ul></li><li><p>git本地分支操作</p><ul><li>创建分支：<code>$:git branch &lt;分支名&gt;</code>;</li><li>切换到指定分支:<code>$:git branch &lt;分支名&gt;</code>;</li><li>查看本地所有分支:<code>$:git branch -a</code></li><li>删除一个本地分支:<code>$:git branch -d &lt;分支名&gt;</code></li><li>查看所有本地分支与远程分支的连接关系：<code>$ git branch -vv</code></li><li>指定当前分支与远程分支连接:<ul><li><code>$git branch --set-upstream-to=&lt;远程仓库别名&gt;/&lt;远程分支名&gt;</code></li><li>如<code>$git branch --set-upstream-to=origin/Group04-Test06-stable</code></li></ul></li><li>推送本地指定分支A的内容到远程分支B：<ul><li><code>$ git push &lt;远程仓库别名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code></li><li>如：<code>$git push origin master:Group04-Test06-stable</code></li></ul></li></ul></li><li><p>git本地合并分支</p><ul><li>将<code>分支1</code>与<code>当前分支</code>合并：<code>$:git merge &lt;分支名1&gt;</code></li></ul></li><li><p>git克隆远程仓库到本地:<code>$:git clone &lt;复制的远程仓库地址&gt;</code></p></li><li><p>git将commit后的本地仓库推送到远程仓库:</p><ul><li>将commit后的本地仓库的<code>分支名</code>推送到远程仓库<code>&lt;远程仓库别名&gt;</code>:<code>$:git push &lt;远程仓库别名&gt; &lt;分支名&gt;</code></li></ul></li><li><p>git将远程仓库下载到本地仓库:</p><ul><li>拉取当前连接的远程仓库下载到本地仓库:<code>$:git pull</code></li></ul></li><li><p>git准备将本地仓库push到远程仓库，但是因为这个过程之前有人已经修改过了远程仓库，从而导致版本不一致:</p><ol><li>先获取远程更新:<code>$:git fetch upstream</code></li><li>把远程更新合并到自己的分支中:<code>$:git merge upstream/&lt;自己分支名&gt;</code></li><li>再将本地仓库push到远程仓库:<code>$:git push</code></li></ol></li><li><p>git查看当前连接的远程仓库:<code>$:git remote</code></p></li><li><p>git发行版本:</p><ul><li>为commit后的本地仓库后打上tags:<code>$:git tag -a &lt;版本号&gt; -m "&lt;备注信息&gt;"</code></li><li>推送标签到远程分支:<code>$:git push &lt;远程仓库别名&gt; &lt;版本号&gt;</code></li><li>删除本地标签:<code>$:git tag -d &lt;版本号&gt;</code></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
